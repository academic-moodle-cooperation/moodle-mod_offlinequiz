{"version":3,"file":"modal_add_random_question.min.js","sources":["../src/modal_add_random_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the add random question modal.\n *\n * @module     mod_offlinequiz/modal_add_random_question\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Modal from './add_question_modal';\nimport * as Notification from 'core/notification';\nimport * as Fragment from 'core/fragment';\nimport * as Templates from 'core/templates';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport {call as fetchMany} from 'core/ajax';\nimport Pending from 'core/pending';\n\nconst SELECTORS = {\n    ANCHOR: 'a[href]',\n    EXISTING_CATEGORY_CONTAINER: '[data-region=\"existing-category-container\"]',\n    EXISTING_CATEGORY_TAB: '#id_existingcategoryheader',\n    NEW_CATEGORY_CONTAINER: '[data-region=\"new-category-container\"]',\n    NEW_CATEGORY_TAB: '#id_newcategoryheader',\n    TAB_CONTENT: '[data-region=\"tab-content\"]',\n    ADD_ON_PAGE_FORM_ELEMENT: '[name=\"addonpage\"]',\n    ADD_RANDOM_BUTTON: 'input[type=\"submit\"][name=\"addrandom\"]',\n    ADD_NEW_CATEGORY_BUTTON: 'input[type=\"submit\"][name=\"newcategory\"]',\n    SUBMIT_BUTTON_ELEMENT: 'input[type=\"submit\"][name=\"addrandom\"], input[type=\"submit\"][name=\"newcategory\"]',\n    FORM_HEADER: 'legend',\n    SELECT_NUMBER_TO_ADD: '#menurandomcount',\n    NEW_CATEGORY_ELEMENT: '#categoryname',\n    PARENT_CATEGORY_ELEMENT: '#parentcategory',\n    FILTER_CONDITION_ELEMENT: '[data-filtercondition]',\n    FORM_ELEMENT: '#add_random_question_form',\n    MESSAGE_INPUT: '[name=\"message\"]',\n    SWITCH_TO_OTHER_BANK: 'button[data-action=\"switch-question-bank\"]',\n    NEW_BANKMOD_ID: 'data-newmodid',\n    BANK_SEARCH: '#searchbanks',\n    GO_BACK_BUTTON: 'button[data-action=\"go-back\"]',\n    GROUP_ID: 'select[name=\"groupnumber\"]',\n};\n\nexport default class ModalAddRandomQuestion extends Modal {\n    static TYPE = 'mod_offlinequiz-offlinequiz-add-random-question';\n    static TEMPLATE = 'mod_offlinequiz/modal_add_random_question';\n\n    /**\n     * Create the add random question modal.\n     *\n     * @param  {Number} contextId Current context id.\n     * @param  {Number} bankCmId Current question bank course module id.\n     * @param  {string} category Category id and category context id comma separated.\n     * @param  {string} returnUrl URL to return to after form submission.\n     * @param  {Number} quizCmId Current quiz course module id.\n     * @param  {boolean} showNewCategory Display the New category tab when selecting random questions.\n     */\n    static init(\n        contextId,\n        bankCmId,\n        category,\n        returnUrl,\n        quizCmId,\n        showNewCategory = true\n    ) {\n        const selector = '.menu [data-action=\"addarandomquestion\"]';\n        document.addEventListener('click', (e) => {\n            const trigger = e.target.closest(selector);\n            if (!trigger) {\n                return;\n            }\n            e.preventDefault();\n\n            ModalAddRandomQuestion.create({\n                contextId,\n                bankCmId,\n                category,\n                returnUrl,\n                quizCmId,\n                showNewCategory,\n                title: trigger.dataset.header,\n                addOnPage: trigger.dataset.addonpage,\n\n                templateContext: {\n                    hidden: showNewCategory,\n                },\n            });\n        });\n    }\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    constructor(root) {\n        super(root);\n        this.category = null;\n        this.returnUrl = null;\n        this.quizCmId = null;\n        this.loadedForm = false;\n    }\n\n    configure(modalConfig) {\n        modalConfig.removeOnClose = true;\n\n        this.setCategory(modalConfig.category);\n        this.setReturnUrl(modalConfig.returnUrl);\n        this.showNewCategory = modalConfig.showNewCategory;\n\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Set the id of the page that the question should be added to\n     * when the user clicks the add to quiz link.\n     *\n     * @method setAddOnPageId\n     * @param {int} id\n     */\n    setAddOnPageId(id) {\n        super.setAddOnPageId(id);\n        this.getBody().find(SELECTORS.ADD_ON_PAGE_FORM_ELEMENT).val(id);\n    }\n\n    /**\n     * Set the category for this form. The category is a comma separated\n     * category id and category context id.\n     *\n     * @method setCategory\n     * @param {string} category\n     */\n    setCategory(category) {\n        this.category = category;\n    }\n\n    /**\n     * Returns the saved category.\n     *\n     * @method getCategory\n     * @return {string}\n     */\n    getCategory() {\n        return this.category;\n    }\n\n    /**\n     * Set the return URL for the form.\n     *\n     * @method setReturnUrl\n     * @param {string} url\n     */\n    setReturnUrl(url) {\n        this.returnUrl = url;\n    }\n\n    /**\n     * Returns the return URL for the form.\n     *\n     * @method getReturnUrl\n     * @return {string}\n     */\n    getReturnUrl() {\n        return this.returnUrl;\n    }\n\n    /**\n     * Moves a given form element inside (a child of) a given tab element.\n     *\n     * Hides the 'legend' (e.g. header) element of the form element because the\n     * tab has the name.\n     *\n     * Moves the submit button into a footer element at the bottom of the form\n     * element for styling purposes.\n     *\n     * @method moveContentIntoTab\n     * @param  {jquery} tabContent The form element to move into the tab.\n     * @param  {jquey} tabElement The tab element for the form element to move into.\n     */\n    moveContentIntoTab(tabContent, tabElement) {\n        // Hide the header because the tabs show us which part of the form we're\n        // looking at.\n        tabContent.find(SELECTORS.FORM_HEADER).addClass('hidden');\n        // Move the element inside a tab.\n        tabContent.wrap(tabElement);\n    }\n\n    /**\n     * Empty the tab content container and move all tabs from the form into the\n     * tab container element.\n     *\n     * @method moveTabsIntoTabContent\n     * @param  {jquery} form The form element.\n     */\n    moveTabsIntoTabContent(form) {\n        // Empty it to remove the loading icon.\n        const tabContent = this.getBody().find(SELECTORS.TAB_CONTENT).empty();\n        // Make sure all tabs are inside the tab content element.\n        form.find('[role=\"tabpanel\"]').wrapAll(tabContent);\n    }\n\n    /**\n     * Make sure all of the tabs have a cancel button in their fotter to sit along\n     * side the submit button.\n     *\n     * @method moveCancelButtonToTabs\n     * @param  {jquey} form The form element.\n     */\n    moveCancelButtonToTabs(form) {\n        const cancelButton = form.find(SELECTORS.CANCEL_BUTTON_ELEMENT).addClass('ms-1');\n        const tabFooters = form.find('[data-region=\"footer\"]');\n        // Remove the buttons container element.\n        cancelButton.closest(SELECTORS.BUTTON_CONTAINER).remove();\n        cancelButton.clone().appendTo(tabFooters);\n    }\n\n    /**\n     * Load the add random question form in a fragement and perform some transformation\n     * on the HTML to convert it into tabs for rendering in the modal.\n     *\n     * @method loadForm\n     * @return {promise} Resolved with form HTML and JS.\n     */\n    loadForm() {\n        const addonpage = this.getAddOnPageId();\n        const returnurl = this.getReturnUrl();\n        const quizcmid = this.quizCmId;\n        const bankcmid = this.bankCmId;\n\n        return Fragment.loadFragment(\n            'mod_offlinequiz',\n            'add_random_question_form',\n            this.getContextId(),\n            {\n                addonpage,\n                returnurl,\n                quizcmid,\n                bankcmid,\n            }\n        )\n            .then((html, js) => {\n                const form = $(html);\n                const existingCategoryTabContent = form.find(SELECTORS.EXISTING_CATEGORY_TAB);\n                const existingCategoryTab = this.getBody().find(SELECTORS.EXISTING_CATEGORY_CONTAINER);\n                const newCategoryTabContent = form.find(SELECTORS.NEW_CATEGORY_TAB);\n                const newCategoryTab = this.getBody().find(SELECTORS.NEW_CATEGORY_CONTAINER);\n\n                // Transform the form into tabs for better rendering in the modal.\n                this.moveContentIntoTab(existingCategoryTabContent, existingCategoryTab);\n                this.moveContentIntoTab(newCategoryTabContent, newCategoryTab);\n                this.moveTabsIntoTabContent(form);\n\n                Templates.replaceNode(this.getBody().find(SELECTORS.TAB_CONTENT), form, js);\n                return;\n            })\n            .then(() => {\n                // Make sure the form change checker is disabled otherwise it'll stop the user from navigating away from the\n                // page once the modal is hidden.\n                FormChangeChecker.disableAllChecks();\n\n                // Add question to quiz.\n                this.getBody()[0].addEventListener('click', (e) => {\n                    const button = e.target.closest(SELECTORS.SUBMIT_BUTTON_ELEMENT);\n                    if (!button) {\n                        return;\n                    }\n                    e.preventDefault();\n\n                    // Intercept the submission to adjust the POST params so that the quiz mod id is set and not the bank module id.\n                    document.querySelector('#questionscontainer input[name=\"cmid\"]').setAttribute('name', this.quizCmId);\n\n                    // Add Random questions if the add random button was clicked.\n                    const addRandomButton = e.target.closest(SELECTORS.ADD_RANDOM_BUTTON);\n                    if (addRandomButton) {\n                        const randomcount = document.querySelector(SELECTORS.SELECT_NUMBER_TO_ADD).value;\n                        const filtercondition = document.querySelector(SELECTORS.FILTER_CONDITION_ELEMENT).dataset?.filtercondition;\n                        const groupnumber = document.querySelector(SELECTORS.GROUP_ID).value;\n\n                        this.addQuestions(quizcmid, addonpage, randomcount, filtercondition, '', '', groupnumber);\n                        return;\n                    }\n                    // Add new category if the add category button was clicked.\n                    const addCategoryButton = e.target.closest(SELECTORS.ADD_NEW_CATEGORY_BUTTON);\n                    if (addCategoryButton) {\n                        this.addQuestions(\n                            quizcmid,\n                            addonpage,\n                            1,\n                            '',\n                            document.querySelector(SELECTORS.NEW_CATEGORY_ELEMENT).value,\n                            document.querySelector(SELECTORS.PARENT_CATEGORY_ELEMENT).value\n                        );\n                        return;\n                    }\n                });\n\n                this.getModal().on('click', SELECTORS.SWITCH_TO_OTHER_BANK, () => {\n                    this.handleSwitchBankContentReload(SELECTORS.BANK_SEARCH)\n                        .then(function(ModalOfflinequizQuestionBank) {\n                            $(SELECTORS.BANK_SEARCH)?.on('change', (e) => {\n                                const bankCmId = $(e.currentTarget).val();\n                                // Have to recreate the modal as we have already used the body for the switch bank content.\n                                if (bankCmId > 0) {\n                                    ModalAddRandomQuestion.create({\n                                        'contextId': ModalOfflinequizQuestionBank.getContextId(),\n                                        'bankCmId': bankCmId,\n                                        'category': ModalOfflinequizQuestionBank.getCategory(),\n                                        'returnUrl': ModalOfflinequizQuestionBank.getReturnUrl(),\n                                        'quizCmId': ModalOfflinequizQuestionBank.quizCmId,\n                                        'title': ModalOfflinequizQuestionBank.originalTitle,\n                                        'addOnPage': ModalOfflinequizQuestionBank.getAddOnPageId(),\n                                        'templateContext': {hidden: ModalOfflinequizQuestionBank.showNewCategory},\n                                        'showNewCategory': ModalOfflinequizQuestionBank.showNewCategory,\n                                    })\n                                        .then(ModalOfflinequizQuestionBank.destroy())\n                                        .catch(Notification.exception);\n                                }\n                            });\n                            return ModalOfflinequizQuestionBank;\n                        });\n                });\n\n                this.getModal().on('click', SELECTORS.GO_BACK_BUTTON, (e) => {\n                    const anchorElement = $(e.currentTarget);\n                    // Have to recreate the modal as we have already used the body for the switch bank content.\n                    ModalAddRandomQuestion.create({\n                        'contextId': this.getContextId(),\n                        'bankCmId': anchorElement.attr('value'),\n                        'category': this.getCategory(),\n                        'returnUrl': this.getReturnUrl(),\n                        'quizCmId': this.quizCmId,\n                        'title': this.originalTitle,\n                        'addOnPage': this.getAddOnPageId(),\n                        'templateContext': {hidden: this.showNewCategory},\n                        'showNewCategory': this.showNewCategory,\n                    }).then(this.destroy()).catch(Notification.exception);\n                });\n\n                this.getModal().on('click', SELECTORS.ANCHOR, (e) => {\n                    const anchorElement = $(e.currentTarget);\n                    // Have to recreate the modal as we have already used the body for the switch bank content.\n                    if (anchorElement.closest('a[' + SELECTORS.NEW_BANKMOD_ID + ']').length) {\n                        ModalAddRandomQuestion.create({\n                            'contextId': this.getContextId(),\n                            'bankCmId': anchorElement.attr(SELECTORS.NEW_BANKMOD_ID),\n                            'category': this.getCategory(),\n                            'returnUrl': this.getReturnUrl(),\n                            'quizCmId': this.quizCmId,\n                            'title': this.originalTitle,\n                            'addOnPage': this.getAddOnPageId(),\n                            'templateContext': {hidden: this.showNewCategory},\n                            'showNewCategory': this.showNewCategory,\n                        }).then(this.destroy()).catch(Notification.exception);\n                    }\n                });\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Call web service function to add random questions\n     *\n     * @param {number} quizcmid the course module id of the quiz to add questions to.\n     * @param {number} addonpage the page where random questions will be added to\n     * @param {number} randomcount Number of random questions\n     * @param {string} filtercondition Filter condition\n     * @param {string} newcategory add new category\n     * @param {string} parentcategory parent category of new category\n     * @param {number} groupnumber groupnumber\n     */\n    async addQuestions(\n        quizcmid,\n        addonpage,\n        randomcount,\n        filtercondition,\n        newcategory,\n        parentcategory,\n        groupnumber\n    ) {\n        // We do not need to resolve this Pending because the form submission will result in a page redirect.\n        new Pending('mod-offlinequiz/modal_add_random_questions');\n        const call = {\n            methodname: 'mod_offlinequiz_add_random_questions',\n            args: {\n                cmid: quizcmid,\n                addonpage,\n                randomcount,\n                filtercondition,\n                newcategory,\n                parentcategory,\n                groupnumber,\n            }\n        };\n        try {\n            const response = await fetchMany([call])[0];\n            const form = document.querySelector(SELECTORS.FORM_ELEMENT);\n            const messageInput = form.querySelector(SELECTORS.MESSAGE_INPUT);\n            messageInput.value = response.message;\n            form.submit();\n        } catch (e) {\n            Notification.exception(e);\n        }\n    }\n\n    /**\n     * Override the modal show function to load the form when this modal is first\n     * shown.\n     *\n     * @method show\n     */\n    show() {\n        super.show(this);\n\n        if (!this.loadedForm) {\n            this.tabHtml = this.getBody();\n            this.loadForm(window.location.search);\n            this.loadedForm = true;\n        }\n    }\n}\n\nModalAddRandomQuestion.registerModalType();\n"],"names":["SELECTORS","ANCHOR","EXISTING_CATEGORY_CONTAINER","EXISTING_CATEGORY_TAB","NEW_CATEGORY_CONTAINER","NEW_CATEGORY_TAB","TAB_CONTENT","ADD_ON_PAGE_FORM_ELEMENT","ADD_RANDOM_BUTTON","ADD_NEW_CATEGORY_BUTTON","SUBMIT_BUTTON_ELEMENT","FORM_HEADER","SELECT_NUMBER_TO_ADD","NEW_CATEGORY_ELEMENT","PARENT_CATEGORY_ELEMENT","FILTER_CONDITION_ELEMENT","FORM_ELEMENT","MESSAGE_INPUT","SWITCH_TO_OTHER_BANK","NEW_BANKMOD_ID","BANK_SEARCH","GO_BACK_BUTTON","GROUP_ID","ModalAddRandomQuestion","Modal","contextId","bankCmId","category","returnUrl","quizCmId","showNewCategory","document","addEventListener","e","trigger","target","closest","preventDefault","create","title","dataset","header","addOnPage","addonpage","templateContext","hidden","constructor","root","loadedForm","configure","modalConfig","removeOnClose","setCategory","setReturnUrl","setAddOnPageId","id","getBody","find","val","getCategory","this","url","getReturnUrl","moveContentIntoTab","tabContent","tabElement","addClass","wrap","moveTabsIntoTabContent","form","empty","wrapAll","moveCancelButtonToTabs","cancelButton","CANCEL_BUTTON_ELEMENT","tabFooters","BUTTON_CONTAINER","remove","clone","appendTo","loadForm","getAddOnPageId","returnurl","quizcmid","bankcmid","Fragment","loadFragment","getContextId","then","html","js","existingCategoryTabContent","existingCategoryTab","newCategoryTabContent","newCategoryTab","Templates","replaceNode","FormChangeChecker","disableAllChecks","querySelector","setAttribute","randomcount","value","filtercondition","_document$querySelect","groupnumber","addQuestions","getModal","on","handleSwitchBankContentReload","ModalOfflinequizQuestionBank","currentTarget","originalTitle","destroy","catch","Notification","exception","anchorElement","attr","length","newcategory","parentcategory","Pending","call","methodname","args","cmid","response","message","submit","show","tabHtml","window","location","search","registerModalType"],"mappings":"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"}