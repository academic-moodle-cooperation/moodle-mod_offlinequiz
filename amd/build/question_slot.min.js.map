{"version":3,"file":"question_slot.min.js","sources":["../src/question_slot.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the question slot template for each question in the quiz edit view.\n *\n * @module     mod_offlinequiz/question_slot\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Guillermo Gomez Arias <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport * as str from 'core/str';\n\n/**\n * Set the question version for the slot.\n *\n * @param {Number} slotId\n * @param {Number} newVersion\n * @return {Array} The modified question version\n */\nconst setQuestionVersion = (slotId, newVersion) => fetchMany([{\n    methodname: 'mod_offlinequiz_set_question_version',\n    args: {\n        slotid: slotId,\n        newversion: newVersion\n    }\n}])[0];\n\n/**\n * Replace the container with a new version.\n *\n * @param {number} elementslotid the id of the slot\n */\nconst registerEventListeners = (elementslotid) => {\n    document.addEventListener('change', e => {\n        if (!e.target.matches('[data-action=\"mod_offlinequiz-select_slot\"][data-slot-id]')) {\n            return;\n        }\n\n        const slotId = e.target.dataset.slotId;\n        const newVersion = parseInt(e.target.value);\n\n        if (elementslotid == slotId) {\n            setQuestionVersion(slotId, newVersion)\n                .then((response) => {\n                    let message = new Object();\n                    var langstrings = [\n                        {key: 'qversioncannotupdate', component: 'mod_offlinequiz'},\n                        {key: 'qversionupdated', component: 'mod_offlinequiz'},\n                        {key: 'qversionnumbersdiffer', component: 'mod_offlinequiz'},\n                        {key: 'qversionupdatedwarning', component: 'mod_offlinequiz'},\n                        {key: 'qversionupdateerror', component: 'mod_offlinequiz'},\n                    ];\n                    str.get_strings(langstrings).done(function(strings) {\n                        if (response.result) { // If the question was updated.\n                            // If the number of answers are the same but the forms are already created, we need a warning.\n                            if (!response.answersdiffer && !response.canbeedited) {\n                                message.title = strings[1];\n                                message.body = strings[3];\n                            } else {\n                                message.title = null;\n                            }\n                        } else {\n                            if (response.answersdiffer && !response.canbeedited) {\n                                // If the version was not updated because the numbers of answers differ and the forms are created.\n                                message.title = strings[0];\n                                message.body = strings[2];\n                            } else {\n                                if (response.samequestion) {\n                                    message.title = null;\n                                } else {\n                                    // If the version was not updated because of some other error.\n                                    message.title = strings[0];\n                                    message.body = strings[4];\n                                }\n                            }\n                        }\n\n                        let url = new URL(location.href);\n                        url.searchParams.delete('lastchanged');\n                        let redirect = url.toString();\n\n                        if (message.title) {\n                            ModalFactory.create({\n                                type: ModalFactory.types.ALERT,\n                                title: message.title,\n                                body: message.body\n                            }).done(function(modal) {\n                                var root = modal.getRoot();\n                                root.on(ModalEvents.cancel, function() {\n                                    location.href = redirect;\n                                });\n                                modal.show();\n                            });\n                        } else {\n                            location.href = redirect;\n                        }\n                    });\n                return;\n            })\n            .catch(Notification.exception);\n        }\n    });\n};\n\n/** @property {Boolean} eventsRegistered If the event has been registered or not */\nlet eventsRegistered = false;\n\n/**\n * Entrypoint of the js.\n *\n * @param {number} slotid the id of the slot\n */\nexport const init = (slotid) => {\n    if (eventsRegistered) {\n        return;\n    }\n\n    registerEventListeners(slotid);\n};\n"],"names":["registerEventListeners","elementslotid","document","addEventListener","e","target","matches","slotId","dataset","newVersion","parseInt","value","methodname","args","slotid","newversion","setQuestionVersion","then","response","message","Object","str","get_strings","key","component","done","strings","result","answersdiffer","canbeedited","title","body","samequestion","url","URL","location","href","searchParams","delete","redirect","toString","create","type","ModalFactory","types","ALERT","modal","getRoot","on","ModalEvents","cancel","show","catch","Notification","exception"],"mappings":";;;;;;;;44BAkDMA,uBAA0BC,gBAC5BC,SAASC,iBAAiB,UAAUC,QAC3BA,EAAEC,OAAOC,QAAQ,0EAIhBC,OAASH,EAAEC,OAAOG,QAAQD,OAC1BE,WAAaC,SAASN,EAAEC,OAAOM,OAEjCV,eAAiBM,QAtBF,EAACA,OAAQE,cAAe,cAAU,CAAC,CAC1DG,WAAY,uCACZC,KAAM,CACFC,OAAQP,OACRQ,WAAYN,eAEhB,GAiBQO,CAAmBT,OAAQE,YACtBQ,MAAMC,eACCC,QAAU,IAAIC,OAQlBC,IAAIC,YAPc,CACd,CAACC,IAAK,uBAAwBC,UAAW,mBACzC,CAACD,IAAK,kBAAmBC,UAAW,mBACpC,CAACD,IAAK,wBAAyBC,UAAW,mBAC1C,CAACD,IAAK,yBAA0BC,UAAW,mBAC3C,CAACD,IAAK,sBAAuBC,UAAW,qBAEfC,MAAK,SAASC,SACnCR,SAASS,OAEJT,SAASU,eAAkBV,SAASW,YAIrCV,QAAQW,MAAQ,MAHhBX,QAAQW,MAAQJ,QAAQ,GACxBP,QAAQY,KAAOL,QAAQ,IAKvBR,SAASU,gBAAkBV,SAASW,aAEpCV,QAAQW,MAAQJ,QAAQ,GACxBP,QAAQY,KAAOL,QAAQ,IAEnBR,SAASc,aACTb,QAAQW,MAAQ,MAGhBX,QAAQW,MAAQJ,QAAQ,GACxBP,QAAQY,KAAOL,QAAQ,QAK/BO,IAAM,IAAIC,IAAIC,SAASC,MAC3BH,IAAII,aAAaC,OAAO,mBACpBC,SAAWN,IAAIO,WAEfrB,QAAQW,6BACKW,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,MACzBf,MAAOX,QAAQW,MACfC,KAAMZ,QAAQY,OACfN,MAAK,SAASqB,OACFA,MAAMC,UACZC,GAAGC,sBAAYC,QAAQ,WACxBf,SAASC,KAAOG,YAEpBO,MAAMK,UAGVhB,SAASC,KAAOG,eAK/Ba,MAAMC,sBAAaC,6BAaXxC,SAKjBd,uBAAuBc"}